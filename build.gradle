plugins {
	id 'java'
	id 'groovy'
	id 'net.saliman.cobertura' version '2.3.1'
	id 'jacoco'
	id 'com.github.kt3k.coveralls' version '2.6.3'
	id 'org.sonarqube' version '2.1'
}

group = 'SantanaCreations'
version = '1.0'
description = 'Common library code'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

def javaVersion = '1.8'

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

if (!hasProperty('mainClass')) {
    ext.mainClass = ''
}

repositories {
    mavenCentral()
}

dependencies {
	testCompile 'junit:junit:4.12'
	testRuntime 'org.slf4j:slf4j-api:1.7.10'
}

test {
	group = 'Reporting'
	description = 'Generates test reports for unit tests'

	filter {
		includeTestsMatching '*Test'
    }

	jacoco {
		classDumpFile = file("$buildDir/jacoco/classpathdumps")
	}

	//ignoreFailures = true
	//maxParallelForks = 100

	//if (project.hasProperty('maxParallelForks'))
	//	maxParallelForks = project.maxParallelForks as int
	//if (project.hasProperty('forkEvery'))
	//	forkEvery = project.forkEvery as int
}

jacocoTestReport {
	group = 'Reporting'
	description = 'Generates Jacoco coverage reports for unit tests'

	reports {
		html.enabled = true
		xml.enabled = true
		html.destination "$buildDir/reports/jacoco/jacoco-html"
		xml.destination "$buildDir/reports/jacoco/jacoco.xml"
	}
}

task integrationTest(type: Test, dependsOn: cleanTest) {
	jacoco {
		destinationFile = file("$buildDir/jacoco/it/jacoco-it.exec")
		classDumpFile = file("$buildDir/jacoco/it/classpathdumps")
	}

	ignoreFailures = true
	testClassesDir = file('src/it')
	classpath = files("$buildDir/classes/it")
}

cobertura {
	group = 'Reporting'
	description = 'Generates Cobertura coverage reports for unit tests'

	coverageFormats = ['html', 'xml']
	coverageReportDir = file("$buildDir/reports/cobertura")
	coverageIgnoreTrivial = true
	coverageIgnores = ['org.slf4j.Logger.*']
}

sonarqube {
    properties {
	    property 'sonar.projectKey', "$group"
	    property 'sonar.projectName', 'Santana Creations'
	    property 'sonar.projectDescription', "$description"
	    property 'sonar.projectVersion', "$version"
	    property 'sonar.sourceEncoding', 'UTF-8'
	    property 'sonar.host.url', 'https://sonarqube.com'
	    property 'sonar.sources', 'src'
	    property 'sonar.java.binaries', "$output.classesDir.getPath()/"
	    property 'sonar.java.libraries', dependencyCacheDir.getPath()
	    property 'sonar.java.test.binaries', "$buildDir/classes/test/"
	    property 'sonar.java.test.libraries', dependencyCacheDir.getPath()
	    property 'sonar.cobertura.reportPath', "$cobertura.coverageReportDir/coverage.xml"
	    property 'sonar.jacoco.reportPath', "$buildDir/jacoco/test.exec"
	    property 'sonar.groovy.jacoco.reportPath', "$buildDir/jacoco/test.exec"
	    property 'sonar.java.source', javaVersion
	    property 'sonar.java.target', javaVersion
    }
}